// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Task components renders correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="task"
>
    <Label
        id="all-todo"
        onClick={undefined}
    >
        All
    </Label>
    <Label
        id="toggle-all"
        onClick={[Function]}
    >
        Toggle
    </Label>
    <Label
        id="active-todo"
        onClick={undefined}
    >
        Active
    </Label>
    <Label
        id="complete-todo"
        onClick={undefined}
    >
        Completed
    </Label>
</div>,
  "nodes": Array [
    <div
      className="task"
>
      <Label
            id="all-todo"
            onClick={undefined}
      >
            All
      </Label>
      <Label
            id="toggle-all"
            onClick={[Function]}
      >
            Toggle
      </Label>
      <Label
            id="active-todo"
            onClick={undefined}
      >
            Active
      </Label>
      <Label
            id="complete-todo"
            onClick={undefined}
      >
            Completed
      </Label>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Task />,
      "_debugID": 12,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Task {
        "_reactInternalInstance": [Circular],
        "activeTodos": [Function],
        "completedTodos": [Function],
        "context": Object {},
        "newTodos": [Function],
        "props": Object {},
        "refs": Object {},
        "state": null,
        "toggleAll": [Function],
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 8,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="task"
>
          <Label
                    id="all-todo"
                    onClick={undefined}
          >
                    All
          </Label>
          <Label
                    id="toggle-all"
                    onClick={[Function]}
          >
                    Toggle
          </Label>
          <Label
                    id="active-todo"
                    onClick={undefined}
          >
                    Active
          </Label>
          <Label
                    id="complete-todo"
                    onClick={undefined}
          >
                    Completed
          </Label>
</div>,
        "_debugID": 13,
        "_renderedOutput": <div
          className="task"
>
          <Label
                    id="all-todo"
                    onClick={undefined}
          >
                    All
          </Label>
          <Label
                    id="toggle-all"
                    onClick={[Function]}
          >
                    Toggle
          </Label>
          <Label
                    id="active-todo"
                    onClick={undefined}
          >
                    Active
          </Label>
          <Label
                    id="complete-todo"
                    onClick={undefined}
          >
                    Completed
          </Label>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Task />,
}
`;
